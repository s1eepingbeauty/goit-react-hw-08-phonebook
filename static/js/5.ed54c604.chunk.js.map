{"version":3,"sources":["views/LogInView.js","views/styles.module.css","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js"],"names":["INITIAL_STATE","LogInView","useState","email","setEmail","password","setPassword","dispatch","useDispatch","handleChangeForm","target","name","value","resetForm","className","styles","logInForm","onSubmit","e","preventDefault","newUser","logIn","autoComplete","type","onChange","module","exports","_slicedToArray","arr","i","Array","isArray","Symbol","iterator","Object","_arr","_n","_d","_e","undefined","_s","_i","next","done","push","length","err","unsupportedIterableToArray","TypeError"],"mappings":"iNAKMA,EACG,GADHA,EAEM,GA2EGC,UAxEG,WAAO,IAAD,EACIC,mBAASF,GADb,mBACfG,EADe,KACRC,EADQ,OAEUF,mBAASF,GAFnB,mBAEfK,EAFe,KAELC,EAFK,KAGhBC,EAAWC,cAEXC,EAAmB,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAClBC,EAAgBD,EAAhBC,KAAMC,EAAUF,EAAVE,MACd,OAAQD,GACN,IAAK,QACH,OAAOP,EAASQ,GAClB,IAAK,WACH,OAAON,EAAYM,GACrB,QACE,SA0BAC,EAAY,WAChBT,EAASJ,GACTM,EAAYN,IAGd,OACE,8BAEE,uBAAMc,UAAWC,IAAOC,UAAWC,SA9Bd,SAAAC,GACvBA,EAAEC,iBAKF,IAAMC,EAAU,CACdjB,QACAE,YAGFE,EAASc,YAAMD,IACfP,KAkBiES,aAAa,MAA5E,UACE,0CAEE,uBACEC,KAAK,OACLZ,KAAK,QACLC,MAAOT,EACPqB,SAAUf,OAGd,6CAEE,uBACEc,KAAK,WACLZ,KAAK,WACLC,MAAOP,EACPmB,SAAUf,OAGd,wBAAQc,KAAK,SAAb,0B,mBC3ERE,EAAOC,QAAU,CAAC,mBAAqB,mCAAmC,UAAY,0BAA0B,SAAW,yBAAyB,QAAU,wBAAwB,kBAAoB,kCAAkC,iBAAmB,iCAAiC,UAAY,4B,8ECG7R,SAASC,EAAeC,EAAKC,GAC1C,OCLa,SAAyBD,GACtC,GAAIE,MAAMC,QAAQH,GAAM,OAAOA,EDIxB,CAAeA,IELT,SAA+BA,EAAKC,GACjD,GAAsB,qBAAXG,QAA4BA,OAAOC,YAAYC,OAAON,GAAjE,CACA,IAAIO,EAAO,GACPC,GAAK,EACLC,GAAK,EACLC,OAAKC,EAET,IACE,IAAK,IAAiCC,EAA7BC,EAAKb,EAAII,OAAOC,cAAmBG,GAAMI,EAAKC,EAAGC,QAAQC,QAChER,EAAKS,KAAKJ,EAAG5B,QAETiB,GAAKM,EAAKU,SAAWhB,GAH8CO,GAAK,IAK9E,MAAOU,GACPT,GAAK,EACLC,EAAKQ,EACL,QACA,IACOV,GAAsB,MAAhBK,EAAW,QAAWA,EAAW,SAC5C,QACA,GAAIJ,EAAI,MAAMC,GAIlB,OAAOH,GFnBuB,CAAqBP,EAAKC,IAAM,OAAAkB,EAAA,GAA2BnB,EAAKC,IGLjF,WACb,MAAM,IAAImB,UAAU,6IHIgF","file":"static/js/5.ed54c604.chunk.js","sourcesContent":["import { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { logIn } from '../redux/auth/auth-operations';\nimport styles from './styles.module.css';\n\nconst INITIAL_STATE = {\n  email: '',\n  password: '',\n};\n\nconst LogInView = () => {\n  const [email, setEmail] = useState(INITIAL_STATE.email);\n  const [password, setPassword] = useState(INITIAL_STATE.password);\n  const dispatch = useDispatch();\n\n  const handleChangeForm = ({ target }) => {\n    const { name, value } = target;\n    switch (name) {\n      case 'email':\n        return setEmail(value);\n      case 'password':\n        return setPassword(value);\n      default:\n        return;\n    }\n  };\n\n  const handleSubmitForm = e => {\n    e.preventDefault();\n\n    // const isValidatedForm = validateForm();\n    // if (!isValidatedForm) return;\n\n    const newUser = {\n      email,\n      password,\n    };\n\n    dispatch(logIn(newUser));\n    resetForm();\n  };\n\n  //   const validateForm = () => {\n  //      if (!email || !password) {\n  //         alert('Some field is empty');\n  //         return false;\n  //      }\n  //   };\n\n  const resetForm = () => {\n    setEmail(INITIAL_STATE.email);\n    setPassword(INITIAL_STATE.password);\n  };\n\n  return (\n    <div>\n      {/* <h1>LogIn page</h1> */}\n      <form className={styles.logInForm} onSubmit={handleSubmitForm} autoComplete=\"off\">\n        <label>\n          Email\n          <input\n            type=\"text\"\n            name=\"email\"\n            value={email}\n            onChange={handleChangeForm}\n          />\n        </label>\n        <label>\n          Password\n          <input\n            type=\"password\"\n            name=\"password\"\n            value={password}\n            onChange={handleChangeForm}\n          />\n        </label>\n        <button type=\"submit\">LogIn</button>\n      </form>\n    </div>\n  );\n};\n\nexport default LogInView;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"phoneBookContainer\":\"styles_phoneBookContainer__24Y4C\",\"phoneBook\":\"styles_phoneBook__3mKx_\",\"contacts\":\"styles_contacts__13lmv\",\"spinner\":\"styles_spinner__3Hgqg\",\"homeViewContainer\":\"styles_homeViewContainer__2GAdD\",\"registrationForm\":\"styles_registrationForm__2u8Yj\",\"logInForm\":\"styles_logInForm__9P_Ja\"};","import arrayWithHoles from \"@babel/runtime/helpers/esm/arrayWithHoles\";\nimport iterableToArrayLimit from \"@babel/runtime/helpers/esm/iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableRest from \"@babel/runtime/helpers/esm/nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}"],"sourceRoot":""}